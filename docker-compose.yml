services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 60

  create-bucket:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_started   # don't gate on "healthy"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    entrypoint: ["/bin/sh","-c"]
    command: >
      # wait until MinIO answers, then create bucket if missing
      until mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
        echo "waiting for minio..."; sleep 2;
      done &&
      (mc ls local/${MINIO_BUCKET} || mc mb -p local/${MINIO_BUCKET}) &&
      mc anonymous set download local/${MINIO_BUCKET} || true

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE}
    volumes:
      - ./backend:/app
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started    # start even if healthcheck still warming up

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql+psycopg://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@db:5432/$${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_started

volumes:
  db_data:
  minio_data:
